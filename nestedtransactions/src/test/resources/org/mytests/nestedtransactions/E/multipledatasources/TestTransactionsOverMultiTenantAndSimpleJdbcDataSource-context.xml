<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/util 
     http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- this is the service object that we want to make transactional -->
	<bean id="userService"
		class="org.mytests.nestedtransactions.service.PersistentUserService">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<bean id="userDao" class="org.mytests.nestedtransactions.dao.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactoryUsers" />
	</bean>
	
	<bean id="collectionDao" class="org.mytests.nestedtransactions.dao.CollectionDaoImpl">
		<property name="sessionFactory" ref="sessionFactoryCollections" />
	</bean>
	
	 <bean id="contentService" class="org.mytests.nestedtransactions.service.PersistentContentService">
	 	<property name="collectionDao" ref="collectionDao"></property>
	 </bean>
	 
	 <bean id="provisioningService" class="org.mytests.nestedtransactions.service.DefaultProvisioningService">
	  	<property name="userService" ref="userService"/>
	  	<property name="contentService" ref="contentService"/>
	 </bean>


	<!-- simple Session factory used to check that the data is properly inserted. -->
	<bean id="sessionFactoryUsers"
		class="org.mytests.nestedtransactions.dao.hibernate.MultiDataSourceSessionFactoryBean">
		<property name="dataSourceMap" ref="dataSourceMapUsers"/> 
		<property name="annotatedClasses" ref="hibernateAnnotatedClassesUsers"/>
		<property name="hibernateProperties">
			<props>
				<prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.DerbyDialect</prop>
				
				<prop key="hibernate.connection.datasource"></prop>
				
				<prop key="hibernate.multiTenancy">DATABASE</prop>
				<prop key="hibernate.tenant_identifier_resolver">org.mytests.nestedtransactions.dao.hibernate.MultiTenantIdentifierResolver</prop>
				<prop key="hibernate.multi_tenant_connection_provider">org.mytests.nestedtransactions.dao.hibernate.MultiTenantConnectionProvider</prop>
				<prop key="hibernate.multi_tenant.datasource.identifier_for_any">US1</prop>
				
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<bean id="sessionFactoryCollections"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSourceCollections"/> 
		<property name="annotatedClasses" ref="hibernateAnnotatedClassesCollection"/>
		<property name="hibernateProperties">
			<props>
				<prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.DerbyDialect</prop>				
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>
	
	
<util:list id="hibernateAnnotatedClassesUsers">
	<value>org.mytests.nestedtransactions.model.HibUser</value>
</util:list>

<util:list id="hibernateAnnotatedClassesCollection">
	<value>org.mytests.nestedtransactions.model.HibCollection</value>
</util:list>


<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
	below) -->
<tx:advice id="txAdvice" transaction-manager="JtaTransactionManager">
	<!-- the transactional semantics... -->
	<tx:attributes>
		<!-- all methods starting with 'get' are read-only -->
		<tx:method name="load*" read-only="true" />
		<!-- other methods use the default transaction settings (see below) -->
		<tx:method name="*" />
	</tx:attributes>
</tx:advice>

<!-- ensure that the above transactional advice runs for any execution of 
	an operation defined by the FooService interface -->
<aop:config>
	<aop:pointcut id="serviceOperation"
		expression="execution(* org.mytests.nestedtransactions.service.*Service.*(..))" />
	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
</aop:config>

<util:map id="dataSourceMapUsers">
	<entry key="US1" value-ref="dataSourceUsersUS1"/>
	<entry key="EU1" value-ref="dataSourceUsersEU1"/>
</util:map>

<!-- don't forget the XADataSource -->
<bean id="dataSourceUsersUS1" class="com.atomikos.jdbc.AtomikosDataSourceBean"
    init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="dbResourceUsersUS1" />
    <property name="xaDataSourceClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource" />
    <property name="xaProperties">
        <props>
            <prop key="databaseName">UsersUS1;create=true</prop> 
        </props>
    </property>
    <property name="maxPoolSize" value="60" />
    <property name="minPoolSize" value="1" />
</bean>

<bean id="dataSourceUsersEU1" class="com.atomikos.jdbc.AtomikosDataSourceBean"
    init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="dbResourceUsersEU1" />
    <property name="xaDataSourceClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource" />
    <property name="xaProperties">
        <props>
            <prop key="databaseName">UsersEU1;create=true</prop> 
        </props>
    </property>
    <property name="maxPoolSize" value="60" />
    <property name="minPoolSize" value="1" />
</bean>

<bean id="dataSourceCollections" class="com.atomikos.jdbc.AtomikosDataSourceBean"
    init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="dbResourceCollections" />
    <property name="xaDataSourceClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource" />
    <property name="xaProperties">
        <props>
         	<prop key="databaseName">Collections;create=true</prop> 
        </props>
    </property>
    <property name="maxPoolSize" value="60" />
    <property name="minPoolSize" value="1" />
</bean>




<util:map id="dataSourceMapCollections">
	<entry key="dsCollections" value-ref="dataSourceCollections"/>
</util:map>

<!-- similarly, don't forget the PlatformTransactionManager -->
<!--  
     Construct Atomikos UserTransactionManager,  
     needed to configure Spring  
--> 
<bean id="AtomikosTransactionManager"  
      class="com.atomikos.icatch.jta.UserTransactionManager"  
    init-method="init" destroy-method="close"> 
 
   <!--   
         when close is called, should we force  
         transactions to terminate or not?  
   --> 
   <property name="forceShutdown" value="false" /> 
</bean> 
 
<!--  
     Also use Atomikos UserTransactionImp,  
     needed to configure Spring   
-->  
<bean id="AtomikosUserTransaction"  
   class="com.atomikos.icatch.jta.UserTransactionImp"> 
 
   <property name="transactionTimeout" value="300" /> 
</bean> 
 
<!--  
     Configure the Spring framework to use  
     JTA transactions from Atomikos  
--> 
<bean id="JtaTransactionManager"  
      class="org.springframework.transaction.jta.JtaTransactionManager"> 
   <property name="transactionManager" ref="AtomikosTransactionManager" /> 
   <property name="userTransaction" ref="AtomikosUserTransaction" /> 
</bean> 




<bean id="dbInitializerUSers" class=" org.mytests.nestedtransactions.dao.hibernate.MultitenacyDBInitializer"
	  init-method="initialiseBD"
	  p:sessionFactoryBean-ref="&amp;sessionFactoryUsers"
	  p:dataSourceMap-ref="dataSourceMapUsers"/>
	  
<bean id="dbInitializerCollections" class=" org.mytests.nestedtransactions.dao.hibernate.MultitenacyDBInitializer"
	  init-method="initialiseBD"
	  p:sessionFactoryBean-ref="&amp;sessionFactoryCollections"
	  p:dataSourceMap-ref="dataSourceMapCollections"/>

<!-- other <bean/> definitions here -->




</beans>