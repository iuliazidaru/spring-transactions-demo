<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/util 
     http://www.springframework.org/schema/util/spring-util.xsd
     http://www.springframework.org/schema/jms 
     http://www.springframework.org/schema/jms/spring-jms.xsd
     http://activemq.apache.org/schema/core 
     http://activemq.apache.org/schema/core/activemq-core.xsd">



	<!-- this is the service object that we want to make transactional -->
	<bean id="userService"
		class="org.mytests.nestedtransactions.service.PersistentUserService">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<bean id="userDao" class="org.mytests.nestedtransactions.dao.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactoryUsers" />
	</bean>

	
	 <bean id="contentService" class="org.mytests.nestedtransactions.service.JMSProducerContentService">
	 	<property name="jmsTemplate" ref="jmsTemplate"></property>
	 </bean>
	 
	 <bean id="provisioningService" class="org.mytests.nestedtransactions.service.DefaultProvisioningService">
	  	<property name="userService" ref="userService"/>
	  	<property name="contentService" ref="contentService"/>
	 </bean>


	<!-- simple Session factory used to check that the data is properly inserted. -->
	<bean id="sessionFactoryUsers"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSourceUsers"/> 
		<property name="annotatedClasses" ref="hibernateAnnotatedClassesUsers"/>
		<property name="hibernateProperties">
			<props>
				<prop key="current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.DerbyDialect</prop>				
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	
	
	
	<util:list id="hibernateAnnotatedClassesUsers">
		<value>org.mytests.nestedtransactions.model.HibUser</value>
	</util:list>
	
	
	
	
	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
		below) -->
	<tx:advice id="txAdvice" transaction-manager="JtaTransactionManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="load*" read-only="true" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<!-- ensure that the above transactional advice runs for any execution of 
		an operation defined by the FooService interface -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* org.mytests.nestedtransactions.service.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
	
	
	<!-- don't forget the XADataSource -->
	<bean id="dataSourceUsers" class="com.atomikos.jdbc.AtomikosDataSourceBean"
	    init-method="init" destroy-method="close">
	    <property name="uniqueResourceName" value="dbResourceUsersJMSTest" />
	    <property name="xaDataSourceClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource" />
	    <property name="xaProperties">
	        <props>
	            <prop key="databaseName">Users;create=true</prop> 
	        </props>
	    </property>
	    <property name="maxPoolSize" value="60" />
	    <property name="minPoolSize" value="1" />
	</bean>
	
	
	
	<util:map id="dataSourceMapUsers">
		<entry key="dsUsers" value-ref="dataSourceUsers"/>
	</util:map>
	
	
	
	
	
	
	<!-- similarly, don't forget the PlatformTransactionManager -->
	<!--  
	     Construct Atomikos UserTransactionManager,  
	     needed to configure Spring  
	--> 
	<bean id="AtomikosTransactionManager"  
	      class="com.atomikos.icatch.jta.UserTransactionManager"  
	    init-method="init" destroy-method="close"> 
	 
	   <!--   
	         when close is called, should we force  
	         transactions to terminate or not?  
	   --> 
	   <property name="forceShutdown" value="false" /> 
	</bean> 
	 
	<!--  
	     Also use Atomikos UserTransactionImp,  
	     needed to configure Spring   
	-->  
	<bean id="AtomikosUserTransaction"  
	   class="com.atomikos.icatch.jta.UserTransactionImp"> 	 
	   <property name="transactionTimeout" value="300" /> 
	</bean> 
	 
	<!--  
	     Configure the Spring framework to use  
	     JTA transactions from Atomikos  
	--> 
	<bean id="JtaTransactionManager"  
	      class="org.springframework.transaction.jta.JtaTransactionManager"> 
	   <property name="transactionManager" ref="AtomikosTransactionManager" /> 
	   <property name="userTransaction" ref="AtomikosUserTransaction" /> 
	</bean> 
	
	
	
	
	
	
	
	<bean id="dbInitializerUSers" class=" org.mytests.nestedtransactions.dao.hibernate.MultitenacyDBInitializer"
		  init-method="initialiseBD"
		  p:sessionFactoryBean-ref="&amp;sessionFactoryUsers"
		  p:dataSourceMap-ref="dataSourceMapUsers"/>
	  


<!-- JMS -->
    <!--  
         The underying JMS vendor's XA connection factory.  
         XA is required for transactional correctness.  
    --> 
    <bean id="xaJmsFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory"> 
        <property name="brokerURL"> 
            <value>tcp://localhost:61617</value> 
        </property> 
    </bean> 
 
    <!--  
         The Atomikos JTA-enabled TopicConnectionFactory,  
         configured with the vendor's XA factory.  
    --> 
    <bean id="topicConnectionFactoryBean"  
          class="com.atomikos.jms.AtomikosConnectionFactoryBean"  
          init-method="init" destroy-method="close"> 
        <!--  
             The unique resource name needed for recovery  
             by the Atomikos core.  
        --> 
        <property name="uniqueResourceName"> 
            <value>TOPIC_BROKER</value> 
        </property> 
        <property name="xaConnectionFactory"> 
            <ref bean="xaJmsFactory"/> 
        </property> 
    </bean> 
 
    <!--  
         Where do we send updated time table info to?  
         Note: this is a topic to allow multiple subscribers.  
    --> 
    <bean id="topic" class="org.apache.activemq.command.ActiveMQTopic"> 
        <property name="physicalName"> 
            <value>TIMETABLE_TOPIC</value> 
        </property> 
    </bean> 
 
    <!--  
      JMS template for easy sending of timetable update messages with Spring  
    --> 
    <bean id="jmsTemplate"  
          class="org.springframework.jms.core.JmsTemplate"> 
        <property name="connectionFactory"> 
            <ref bean="topicConnectionFactoryBean"/> 
        </property> 
        <property name="defaultDestination"> 
            <ref bean="topic"/> 
        </property> 
        <property name="receiveTimeout" value="1000"/> 
   		<property name="sessionTransacted" value="true"/> 
    </bean> 
    
    
    <!--  Embedded ActiveMQ Broker -->
   <amq:broker id="broker" useJmx="false" persistent="false">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:61617" />
        </amq:transportConnectors>
    </amq:broker>
    
</beans>